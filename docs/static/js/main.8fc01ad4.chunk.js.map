{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARtB,kBAWdM,GAXc,4CAAH,sDCCRO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEnC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAKgB,IAAON,IACzB,kCAAKA,SCHJO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,ECDZ,SAAEA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAXAC,qBAAY,WACRxB,EAAQC,GAAUwB,MAAO,SAAAC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGhB,CAACpB,IAIIqB,EDfuBK,CAAc1B,GAAhCa,EADwB,EAC7BN,KAAYa,EADiB,EACjBA,QAQnB,OACI,qCACI,qBAAIJ,UAAU,qCAAd,cAAqDhB,EAArD,OACEoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADIA,EAAIC,aEnB3BgB,EAAe,WAAQ,IAAD,EACKzC,mBAAS,CAAC,cADf,mBACxB0C,EADwB,KACZ3C,EADY,KAO/B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEGA,SAAYA,GADJA,Y,MCfhC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8fc01ad4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(''); //el estado inicial es un string vacio\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value); \r\n        //aqui se manda el valor del input para que actualice el ESTADO del inputValue que \r\n        // hace referencia al input, es decir lo que el usuario escriba es enviado para que sea renderizado por el input\r\n    }\r\n\r\n    const hadleSubmit = (e) =>{\r\n        e.preventDefault(); //evitar el refresh del navegador\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [ inputValue, ...cats]); //mandando llamar el metodo desde el elemento padre \r\n            setInputValue('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n        <form onSubmit= { hadleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange= { handleInputChange }>    \r\n\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=DnyrXje9rXe0dO4PrF6sH09VVB2ZkMPd`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n   return gifs; \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = { url} alt= { title}></img>\r\n            <p> {title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category}) => {\r\n    const {data:images,loading} = useFetchGifs( category);\r\n\r\n    // useEffect( () => {\r\n    //     getGifs(category).then ( imgs => setImages (imgs));\r\n    // },[ category ])\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\" animate__animated animate__fadeIn\"> {category} </h3>\r\n            { loading && <p className=\" animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n               {\r\n                 //Mostrando el arreglo de gifs en OTRO COMPONENTE \r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id}\r\n                            {...img} // se envian todas y cada una de las propiedades de img de manera independiente\r\n                                     // es decir, id = una prop, title = una prop, url = una prop \r\n                        />\r\n                  ))\r\n\r\n                //  //Mostrando el arreglo de gifs CON DESESTRUCTURACION: \r\n                //     images.map( ({ id, title}) => (\r\n                //         <li key={ id }> { title }</li>\r\n                //   ))\r\n\r\n                // Mostrando el arreglo de gis SIN DESESTRUCTURACION:  \r\n                // images.map( image => {\r\n                //     return <li key={image.id}> { image.title }</li>\r\n                // })\r\n               }\r\n            \r\n            </div>\r\n       </>        \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect ( () => {\r\n        getGifs(category).then ( imgs => {\r\n           setState({\r\n             data: imgs,\r\n             loading: false  \r\n           }) \r\n        });\r\n    },[category])\r\n    \r\n\r\n\r\n    return state; \r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ( ) => {\r\n    const [categories, setCategories] = useState(['Blackpink']);\r\n\r\n    // const handleAdd = ()=>{\r\n    //     // setCategories( [...categories, 'HunterXHunter'] );\r\n    //     setCategories(  cats => [...cats, 'HunterXHunter'] );\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories } />\r\n            <hr></hr> \r\n            <ol>\r\n                {\r\n                  categories.map( category =>( \r\n                     <GifGrid \r\n                        key = { category }\r\n                        category = {category} />\r\n                  ))  \r\n                }\r\n            </ol>   \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}